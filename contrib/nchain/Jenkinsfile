/*
    simple pipeline to perform all Bitcoin SV tests

    node requirements:
    - 16GB RAM
    - docker

    Copyright (c) 2019 Bitcoin Association
    Distributed under the Open BSV software license, see the accompanying file LICENSE.
*/
pipeline {
    agent {
        docker {
            image 'nchain/buildtools:build-sv-bionic'
            label 'docker'
        }
    }
    stages {
        stage('Build') {
            steps {
                slackSend (color: 'good', message: "START: Job '${env.JOB_NAME} #${env.BUILD_NUMBER}' (${env.BUILD_URL})")
                sh './autogen.sh'
                sh './configure --enable-debug'
                sh 'make clean'
                sh 'make -j$(nproc --all)'
            }
        }
        stage('Unit Tests') {
            steps {
                sh 'mkdir -p build/reports'
                sh 'cd src/test && ./test_bitcoin --log_format=JUNIT --log_sink=../../build/reports/unittests.xml'
            }
        }
        stage('secp256k1 Tests') {
            steps {
                sh 'cd src/secp256k1 && make -j$(nproc --all)'
                sh 'src/secp256k1/exhaustive_tests'
                sh 'src/secp256k1/tests'
            }
        }
        stage('univalue Tests') {
            steps {
                sh 'cd src/univalue && make -j$(nproc --all)'
                sh 'cd src/univalue && test/object'
                sh 'cd src/univalue && test/no_nul'
                sh 'cd src/univalue && test/unitester'
            }
        }
        stage('leveldb Tests') {
            steps {
                sh 'cd src/leveldb && make -j$(nproc --all) check'
            }
        }
        stage('Util Tests') {
            steps {
                sh 'test/util/bitcoin-util-test.py --verbose > build/reports/util-test.log'
            }
        }
        // functional tests dont work with --enable-debug
        stage('Rebuild') {
            steps {
                sh './configure'
                sh 'make clean'
                sh 'make -j$(nproc --all)'
            }
        }
        stage('Functional Tests') {
            steps {
                sh 'test/functional/test_runner.py --jobs $(nproc --all) --junitouput=build/reports/func-tests.xml'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'build/reports/**'
            junit 'build/reports/*.xml'
        }
        success {
            slackSend (color: 'good', message: "SUCCESS: Job '${env.JOB_NAME} #${env.BUILD_NUMBER}' (${env.BUILD_URL})")
        }
        failure {
            slackSend (color: 'danger', message: "FAILURE: Job '${env.JOB_NAME} #${env.BUILD_NUMBER}' (${env.BUILD_URL})")
        }
        unstable {
            slackSend (color: 'warning', message: "UNSTABLE: Job '${env.JOB_NAME} #${env.BUILD_NUMBER}' (${env.BUILD_URL})")
        }
    }
}
